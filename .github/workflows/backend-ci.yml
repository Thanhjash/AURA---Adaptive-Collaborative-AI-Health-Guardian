# .github/workflows/backend-ci.yml
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Backend CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_TOKEN }}" \
          | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    # ---------- build the heavy base layer once ------------
    - name: Build and push aura-base
      run: |
        docker buildx build \
          --pull \
          --progress plain \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          -t vgxtj/aura-base:latest \
          -f Dockerfile.base . \
          --push
        # free the workspace
        docker builder prune -f

    # ---------- build service images one‚Äëby‚Äëone ------------
    - name: Build and push each service (sequential)
      env:
        REPO: vgxtj
      run: |
        set -e
        SERVICES="ai_server ecg_interpreter radiology_vqa mental_wellness aura_main"
        for svc in $SERVICES; do
          echo "üî®  Building $svc"
          docker buildx build \
            --pull \
            --progress plain \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t $REPO/aura-${svc}:latest \
            -f services/${svc}/Dockerfile . \
            --push
          # Immediately reclaim disk before the next image
          docker builder prune -f
        done

    # ---------- prepare the PEM key ------------
    - name: Write SSH key
      run: |
        printf '%s\n' "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > aura-key.pem
        chmod 600 aura-key.pem

    # ---------- quick connectivity smoke‚Äëtest ------------
    - name: Test SSH connectivity
      run: |
        ssh -i aura-key.pem -o StrictHostKeyChecking=no \
            ubuntu@${{ secrets.EC2_HOST }} echo "SSH connection OK"

    # ---------- deploy to EC2 ------------
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host:      ${{ secrets.EC2_HOST }}
        username:  ubuntu
        key_path:  aura-key.pem
        debug:     true
        script: |
          cd ~/aura
          docker compose pull
          docker compose up -d

    # ---------- trigger Vercel redeploy ------------
    - name: Trigger Vercel Deploy Hook
      if: success()
      run: |
        echo "üîî Triggering Vercel frontend redeploy..."
        curl -fsS -X POST "${{ secrets.VERCEL_DEPLOY_HOOK }}" || \
        echo "‚ö†Ô∏è  Failed to call Vercel hook (non-fatal)"
